# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15SoPWsmNmteUSDoNbva8itO3LRtb_KOm
"""

import streamlit as st
import matplotlib.pyplot as plt
from langchain_core.messages import HumanMessage
from langchain_core.runnables import RunnableLambda

# Import your agent and config from the other file
from agent_code import agent_chain, config

def run(message):
    res = None
    stream = RunnableLambda(agent_chain).stream(
        {"messages": [HumanMessage(message)], "language": "English"}, config=config
    )

    result = []
    for chunk in stream:
        if res is None:
            res = chunk
        else:
            res += chunk

        if chunk.content:
            result.append(chunk.content)

    return ''.join(result)

# Streamlit app layout
st.title("Business Analysis and Prediction Agent")
st.write("Submit your query to get analysis and predictions.")

# Input field for user message
user_input = st.text_input("Enter your query:", "")

# Add a button to submit the query
if st.button("Submit Query"):
    if user_input:
        # Run the agent with the user's input
        response = run(user_input)

        st.write("### Agent's Response:")
        st.write(response)

        # Example plot: Prediction Graph if user asks for a forecast
        if "create a prediction graph" in user_input.lower():
            # Example historical and forecast data
            historical_data = [1500, 1600, 1650, 1700, 1750, 1800, 1850, 1900, 1950, 2000]
            forecast = [2100, 2150, 2200, 2250, 2300, 2350, 2400, 2450, 2500, 2550, 2600, 2650]

            # Plotting the prediction graph
            plt.figure(figsize=(10, 5))
            plt.plot(historical_data, label='Historical Data', marker='o')
            forecast_index = range(len(historical_data), len(historical_data) + len(forecast))
            plt.plot(forecast_index, forecast, label='Forecast', marker='o', color='green')
            plt.fill_between(forecast_index,
                             [f * 0.9 for f in forecast],
                             [f * 1.1 for f in forecast],
                             color='green', alpha=0.3)
            plt.xlabel('Month')
            plt.ylabel('Rent')
            plt.title('Home Rent Prediction')
            plt.legend()
            plt.grid()
            st.pyplot(plt)

